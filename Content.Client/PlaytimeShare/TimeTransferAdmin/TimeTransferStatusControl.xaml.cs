using Content.Shared.CCVar;
using Content.Shared.PlaytimeShare;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface;
using Robust.Client.UserInterface.Controls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Configuration;

namespace Content.Client.PlaytimeShare.TimeTransferAdmin;

[GenerateTypedNameReferences]
public sealed partial class TimeTransferStatusControl : Control
{
    [Dependency] private readonly IConfigurationManager _cfg = default!;

    #region ccvars

    private bool _timeTransferEnabled;
    private bool _allowNewIncomingTransfers;
    private bool _allowNewOutgoingTransfers;
    private bool _allowUnverifiedTransfers;

    #endregion

    public TimeTransferStatusControl()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        // Maybe these should be in the state just to unify everything but this is technically better so...
        var configSub = _cfg.SubscribeMultiple()
            .OnValueChanged(CCVars.TimeTransferEnabled, x => CvarUpdateLabelBool(EnabledLabel, x, ref _timeTransferEnabled), true)
            .OnValueChanged(CCVars.AllowNewIncomingTransfers, x => CvarUpdateLabelBool(IncomingLabel, x, ref _allowNewIncomingTransfers), true)
            .OnValueChanged(CCVars.AllowNewOutgoingTransfers, x => CvarUpdateLabelBool(OutgoingLabel, x, ref _allowNewOutgoingTransfers), true)
            .OnValueChanged(CCVars.AllowUnverifiedTransfers, x => CvarUpdateLabelBool(UnverifiedLabel, x, ref _allowUnverifiedTransfers), true);

        if (Window != null)
            Window.Destroyed += _ => configSub.Dispose();
    }

    public void HandleState(TimeTransferAdminState state)
    {
        PrivateKeyHandleState(state);
        PublicKeyHandleState(state);
    }

    private void CvarUpdateLabelBool(RichTextLabel label, bool value, ref bool holder)
    {
        holder = value;
        label.Text = Loc.GetString("time-transfer-true-false-color", ("bool", value));
    }

    private void PrivateKeyHandleState(TimeTransferAdminState state)
    {
        PrivateKeyStatusLabel.Text = Loc.GetString("time-transfer-private-key-status", ("status", state.PrivateKeyStatus.ToString()));

        if (state.PrivateKeyStatus != PrivateKeyStatus.Valid)
            SetupInstructions.Visible = true;
    }

    private void PublicKeyHandleState(TimeTransferAdminState state)
    {
        PublicKeyButton.DownloadText = state.PublicKey;
    }
}
