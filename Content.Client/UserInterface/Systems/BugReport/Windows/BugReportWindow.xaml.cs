using System.Diagnostics.CodeAnalysis;
using Content.Client.Players.PlayTimeTracking;
using Content.Shared.BugReport;
using Content.Shared.CCVar;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Configuration;
using Robust.Shared.Utility;

namespace Content.Client.UserInterface.Systems.BugReport.Windows;

[GenerateTypedNameReferences]
public sealed partial class BugReportWindow : DefaultWindow
{
    [Dependency] private readonly IConfigurationManager _cfg = default!;
    // TODO: Use SharedPlaytimeManager when its refactored out of job requirements
    [Dependency] private readonly JobRequirementsManager _job = default!;

    // This action gets invoked when the user submits a bug report.
    public event Action<PlayerBugReportInformation>? OnBugReportSubmitted;

    public BugReportWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        // If your not enabled, don't bother hooking up the events, make the main body invisible and show the error.
        if (!IsEnabled(out var errorMessage))
        {
            DisabledLabel.Text = errorMessage;
            DisabledLabel.Visible = true;
            BugReportContainer.Visible = false;

            return;
        }

        // Hook up the events
        SubmitButton.OnPressed += _ => OnSubmitButtonPressed();
        BugReportTitle.OnTextChanged += _ => HandleInputChange();
        BugReportDescription.OnTextChanged += _ => HandleInputChange();

        HandleInputChange();
    }

    private void OnSubmitButtonPressed()
    {
        var report = new PlayerBugReportInformation
        {
            BugReportTitle = BugReportTitle.Text,
            BugReportDescription = Rope.Collapse(BugReportDescription.TextRope),
        };

        OnBugReportSubmitted?.Invoke(report);

        BugReportTitle.Text = string.Empty;
        BugReportDescription.TextRope = Rope.Leaf.Empty;

        HandleInputChange();
    }


    // Deals with the user changing their input. Ensures that things that depend on what the user has inputted get updated
    // (E.g. the amount of characters they have typed)
    private void HandleInputChange()
    {
        var titleMaxLen = _cfg.GetCVar(CCVars.MaximumBugReportTitleLength);
        var titleMinLen = _cfg.GetCVar(CCVars.MinimumBugReportTitleLength);
        var descriptionMaxLen = _cfg.GetCVar(CCVars.MaximumBugReportDescriptionLength);
        var descriptionMinLen = _cfg.GetCVar(CCVars.MinimumBugReportDescriptionLength);

        var titleLen = BugReportTitle.Text.Length;
        var descriptionLen = BugReportDescription.TextLength;

        var invalidTitleLen = titleLen < titleMinLen || titleLen > titleMaxLen;
        var invalidDescriptionLen = descriptionLen < descriptionMinLen || descriptionLen > descriptionMaxLen;

        TitleCharacterCounter.Text = titleLen + "/" + titleMaxLen;
        TitleCharacterCounter.FontColorOverride = invalidTitleLen ? Color.Red : Color.Green;

        DescriptionCharacterCounter.Text = descriptionLen + "/" + descriptionMaxLen;
        DescriptionCharacterCounter.FontColorOverride = invalidDescriptionLen ? Color.Red : Color.Green;

        SubmitButton.Disabled = invalidTitleLen || invalidDescriptionLen;

        PlaceholderCenter.Visible = descriptionLen == 0;
    }

    // Checks if the bug report window should be enabled for this client.
    private bool IsEnabled([NotNullWhen(false)] out string? errorMessage)
    {
        errorMessage = null;

        if (!_cfg.GetCVar(CCVars.EnablePlayerBugReports))
        {
            errorMessage = Loc.GetString("bug-report-window-disabled-not-enabled");
            return false;
        }

        if (TimeSpan.FromMinutes(_cfg.GetCVar(CCVars.MinimumPlaytimeBugReports)) > _job.FetchOverallPlaytime())
        {
            errorMessage = Loc.GetString("bug-report-window-disabled-playtime");
            return false;
        }

        return true;
    }
}
