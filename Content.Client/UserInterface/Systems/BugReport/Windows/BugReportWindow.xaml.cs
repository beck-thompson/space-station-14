using System.Diagnostics.CodeAnalysis;
using Content.Client.Players.PlayTimeTracking;
using Content.Shared.BugReport;
using Content.Shared.CCVar;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Configuration;
using Robust.Shared.Timing;
using Robust.Shared.Utility;

namespace Content.Client.UserInterface.Systems.BugReport.Windows;

[GenerateTypedNameReferences]
public sealed partial class BugReportWindow : DefaultWindow
{
    [Dependency] private readonly IConfigurationManager _cfg = default!;
    // TODO: Use SharedPlaytimeManager when its refactored out of job requirements
    [Dependency] private readonly JobRequirementsManager _job = default!;

    // This action gets invoked when the user submits a bug report.
    public event Action<PlayerBugReportInformation>? OnBugReportSubmitted;

    // These are NOT always up to date. If someone disconnects and reconnects, the values will be reset.
    // The only other way of getting updated values would be a message from client -> server then from server -> client.
    // I don't think that is worth the added complexity.
    private DateTime lastBugReportSubmittedTime = DateTime.MinValue;
    private int amountOfBugReportsSubmitted;

    // CCvar cached values.
    private bool EnablePlayerBugReports;
    private int MinimumPlaytimeBugReports;
    private int MinimumTimeBetweenBugReports;
    private int MaximumBugReportsPerRound;

    private int MaximumBugReportTitleLength;
    private int MinimumBugReportTitleLength;
    private int MaximumBugReportDescriptionLength;
    private int MinimumBugReportDescriptionLength;

    public BugReportWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        _cfg.OnValueChanged(CCVars.EnablePlayerBugReports, v => { EnablePlayerBugReports = v;}, true);
        _cfg.OnValueChanged(CCVars.MinimumPlaytimeBugReports, v => { MinimumPlaytimeBugReports = v;}, true);
        _cfg.OnValueChanged(CCVars.MinimumTimeBetweenBugReports, v => { MinimumTimeBetweenBugReports = v;}, true);
        _cfg.OnValueChanged(CCVars.MaximumBugReportsPerRound, v => { MaximumBugReportsPerRound = v;}, true);

        _cfg.OnValueChanged(CCVars.MaximumBugReportTitleLength, v => { MaximumBugReportTitleLength = v;}, true);
        _cfg.OnValueChanged(CCVars.MinimumBugReportTitleLength, v => { MinimumBugReportTitleLength = v;}, true);
        _cfg.OnValueChanged(CCVars.MaximumBugReportDescriptionLength, v => { MaximumBugReportDescriptionLength = v;}, true);
        _cfg.OnValueChanged(CCVars.MinimumBugReportDescriptionLength, v => { MinimumBugReportDescriptionLength = v;}, true);

        // Hook up the events
        SubmitButton.OnPressed += _ => OnSubmitButtonPressed();
        BugReportTitle.OnTextChanged += _ => HandleInputChange();
        BugReportDescription.OnTextChanged += _ => HandleInputChange();
        OnOpen += UpdateEnabled;

        HandleInputChange();
        UpdateEnabled();
    }

    private void OnSubmitButtonPressed()
    {
        var report = new PlayerBugReportInformation
        {
            BugReportTitle = BugReportTitle.Text,
            BugReportDescription = Rope.Collapse(BugReportDescription.TextRope),
        };

        OnBugReportSubmitted?.Invoke(report);
        lastBugReportSubmittedTime = DateTime.UtcNow;
        amountOfBugReportsSubmitted++;

        BugReportTitle.Text = string.Empty;
        BugReportDescription.TextRope = Rope.Leaf.Empty;

        HandleInputChange();
    }


    // Deals with the user changing their input. Ensures that things that depend on what the user has inputted get updated
    // (E.g. the amount of characters they have typed)
    private void HandleInputChange()
    {
        var titleLen = BugReportTitle.Text.Length;
        var descriptionLen = BugReportDescription.TextLength;

        var invalidTitleLen = titleLen < MinimumBugReportTitleLength || titleLen > MaximumBugReportTitleLength;
        var invalidDescriptionLen = descriptionLen < MinimumBugReportDescriptionLength || descriptionLen > MaximumBugReportDescriptionLength;

        TitleCharacterCounter.Text = titleLen + "/" + MaximumBugReportTitleLength;
        TitleCharacterCounter.FontColorOverride = invalidTitleLen ? Color.Red : Color.Green;

        DescriptionCharacterCounter.Text = descriptionLen + "/" + MaximumBugReportDescriptionLength;
        DescriptionCharacterCounter.FontColorOverride = invalidDescriptionLen ? Color.Red : Color.Green;

        SubmitButton.Disabled = invalidTitleLen || invalidDescriptionLen;

        PlaceholderCenter.Visible = descriptionLen == 0;
    }

    // Checks if the bug report window should be enabled for this client.
    private bool IsEnabled([NotNullWhen(false)] out string? errorMessage)
    {
        errorMessage = null;

        if (!EnablePlayerBugReports)
        {
            errorMessage = Loc.GetString("bug-report-window-disabled-not-enabled");
            return false;
        }

        if (TimeSpan.FromMinutes(MinimumPlaytimeBugReports) > _job.FetchOverallPlaytime())
        {
            errorMessage = Loc.GetString("bug-report-window-disabled-playtime");
            return false;
        }

        var timeSinceLastReport = DateTime.UtcNow - lastBugReportSubmittedTime;
        var timeBetweenBugReports = TimeSpan.FromMinutes(MinimumTimeBetweenBugReports);

        if (timeSinceLastReport <= timeBetweenBugReports)
        {
            var time = timeBetweenBugReports - timeSinceLastReport;
            errorMessage = Loc.GetString("bug-report-window-disabled-cooldown", ("time", $"{new TimeSpan(time.Days, time.Hours, time.Minutes, time.Seconds)}"));
            return false;
        }

        if (amountOfBugReportsSubmitted >= MaximumBugReportsPerRound)
        {
            errorMessage = Loc.GetString("bug-report-window-disabled-submissions", ("num", MaximumBugReportsPerRound));
            return false;
        }

        return true;
    }

    // Update the state of the window to display either the bug report window or an error explaining why you can't submit a report.
    private void UpdateEnabled()
    {
        var isEnabled = IsEnabled(out var errorMessage);
        DisabledLabel.Text = errorMessage;

        DisabledLabel.Visible = !isEnabled;
        BugReportContainer.Visible = isEnabled;
    }

    protected override void FrameUpdate(FrameEventArgs args)
    {
        base.FrameUpdate(args);
        UpdateEnabled();
    }
}
