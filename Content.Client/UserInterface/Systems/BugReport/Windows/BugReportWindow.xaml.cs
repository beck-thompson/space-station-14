using System.Diagnostics.CodeAnalysis;
using Content.Client.Players.PlayTimeTracking;
using Content.Shared.BugReport;
using Content.Shared.CCVar;
using Robust.Client.AutoGenerated;
using Robust.Client.UserInterface.CustomControls;
using Robust.Client.UserInterface.XAML;
using Robust.Shared.Configuration;
using Robust.Shared.Timing;
using Robust.Shared.Utility;

namespace Content.Client.UserInterface.Systems.BugReport.Windows;

[GenerateTypedNameReferences]
public sealed partial class BugReportWindow : DefaultWindow
{
    [Dependency] private readonly IConfigurationManager _cfg = default!;
    // TODO: Use SharedPlaytimeManager when its refactored out of job requirements
    [Dependency] private readonly JobRequirementsManager _job = default!;

    // This action gets invoked when the user submits a bug report.
    public event Action<PlayerBugReportInformation>? OnBugReportSubmitted;

    private DateTime _lastIsEnabledUpdated;
    private readonly TimeSpan _isEnabledUpdateInterval = TimeSpan.FromSeconds(1);

    // These are NOT always up to date. If someone disconnects and reconnects, the values will be reset.
    // The only other way of getting updated values would be a message from client -> server then from server -> client.
    // I don't think that is worth the added complexity.
    private DateTime _lastBugReportSubmittedTime = DateTime.MinValue;
    private int _amountOfBugReportsSubmitted;

    // CCvar cached values.
    private bool _enablePlayerBugReports;
    private int _minimumPlaytimeBugReports;
    private int _minimumTimeBetweenBugReports;
    private int _maximumBugReportsPerRound;

    private int _maximumBugReportTitleLength;
    private int _minimumBugReportTitleLength;
    private int _maximumBugReportDescriptionLength;
    private int _minimumBugReportDescriptionLength;

    public BugReportWindow()
    {
        RobustXamlLoader.Load(this);
        IoCManager.InjectDependencies(this);

        SetupCCvars();

        // Hook up the events
        SubmitButton.OnPressed += _ => OnSubmitButtonPressed();
        BugReportTitle.OnTextChanged += _ => HandleInputChange();
        BugReportDescription.OnTextChanged += _ => HandleInputChange();
        OnOpen += UpdateEnabled;

        HandleInputChange();
        UpdateEnabled();
    }

    private void OnSubmitButtonPressed()
    {
        var report = new PlayerBugReportInformation
        {
            BugReportTitle = BugReportTitle.Text,
            BugReportDescription = Rope.Collapse(BugReportDescription.TextRope),
        };
        OnBugReportSubmitted?.Invoke(report);

        _lastBugReportSubmittedTime = DateTime.UtcNow;
        _amountOfBugReportsSubmitted++;

        BugReportTitle.Text = string.Empty;
        BugReportDescription.TextRope = Rope.Leaf.Empty;

        HandleInputChange();
        UpdateEnabled();
    }

    /// <summary>
    /// Deals with the user changing their input. Ensures that things that depend on what the user has inputted get updated
    /// (E.g. the amount of characters they have typed)
    /// </summary>
    private void HandleInputChange()
    {
        var titleLen = BugReportTitle.Text.Length;
        var descriptionLen = BugReportDescription.TextLength;

        var invalidTitleLen = titleLen < _minimumBugReportTitleLength || titleLen > _maximumBugReportTitleLength;
        var invalidDescriptionLen = descriptionLen < _minimumBugReportDescriptionLength || descriptionLen > _maximumBugReportDescriptionLength;

        TitleCharacterCounter.Text = Loc.GetString("bug-report-window-submit-char-split", ("typed", titleLen), ("total", _maximumBugReportTitleLength));
        TitleCharacterCounter.FontColorOverride = invalidTitleLen ? Color.Red : Color.Green;

        DescriptionCharacterCounter.Text = Loc.GetString("bug-report-window-submit-char-split", ("typed", descriptionLen), ("total", _maximumBugReportDescriptionLength));

        DescriptionCharacterCounter.FontColorOverride = invalidDescriptionLen ? Color.Red : Color.Green;

        SubmitButton.Disabled = invalidTitleLen || invalidDescriptionLen;

        PlaceholderCenter.Visible = descriptionLen == 0;
    }

    /// <summary>
    /// Checks if the bug report window should be enabled for this client.
    /// </summary>
    private bool IsEnabled([NotNullWhen(false)] out string? errorMessage)
    {
        errorMessage = null;

        if (!_enablePlayerBugReports)
        {
            errorMessage = Loc.GetString("bug-report-window-disabled-not-enabled");
            return false;
        }

        if (TimeSpan.FromSeconds(_minimumPlaytimeBugReports) > _job.FetchOverallPlaytime())
        {
            errorMessage = Loc.GetString("bug-report-window-disabled-playtime");
            return false;
        }

        if (_amountOfBugReportsSubmitted >= _maximumBugReportsPerRound)
        {
            errorMessage = Loc.GetString("bug-report-window-disabled-submissions", ("num", _maximumBugReportsPerRound));
            return false;
        }

        var timeSinceLastReport = DateTime.UtcNow - _lastBugReportSubmittedTime;
        var timeBetweenBugReports = TimeSpan.FromSeconds(_minimumTimeBetweenBugReports);

        if (timeSinceLastReport <= timeBetweenBugReports)
        {
            var time = timeBetweenBugReports - timeSinceLastReport;
            errorMessage = Loc.GetString("bug-report-window-disabled-cooldown", ("time", time.ToString(@"d\.hh\:mm\:ss")));
            return false;
        }

        return true;
    }

    // Update the state of the window to display either the bug report window or an error explaining why you can't submit a report.
    private void UpdateEnabled()
    {
        var isEnabled = IsEnabled(out var errorMessage);
        DisabledLabel.Text = errorMessage;

        DisabledLabel.Visible = !isEnabled;
        BugReportContainer.Visible = isEnabled;
        _lastIsEnabledUpdated = DateTime.UtcNow;
    }

    protected override void FrameUpdate(FrameEventArgs args)
    {
        base.FrameUpdate(args);

        if (!Visible) // Don't bother updating if no one can see the window anyway.
            return;

        if(DateTime.UtcNow - _lastIsEnabledUpdated > _isEnabledUpdateInterval)
            UpdateEnabled();
    }

    #region ccvar functions

    private void SetupCCvars()
    {
        _cfg.OnValueChanged(CCVars.EnablePlayerBugReports, OnEnablePlayerBugReportsChanged, true);
        _cfg.OnValueChanged(CCVars.MinimumPlaytimeInMinutesToEnableBugReports, OnMinimumPlaytimeChanged, true);
        _cfg.OnValueChanged(CCVars.MinimumSecondsBetweenBugReports, OnMinimumTimeBetweenReportsChanged, true);
        _cfg.OnValueChanged(CCVars.MaximumBugReportsPerRound, OnMaximumReportsPerRoundChanged, true);

        _cfg.OnValueChanged(CCVars.MaximumBugReportTitleLength, OnMaxTitleLengthChanged, true);
        _cfg.OnValueChanged(CCVars.MinimumBugReportTitleLength, OnMinTitleLengthChanged, true);
        _cfg.OnValueChanged(CCVars.MaximumBugReportDescriptionLength, OnMaxDescriptionLengthChanged, true);
        _cfg.OnValueChanged(CCVars.MinimumBugReportDescriptionLength, OnMinDescriptionLengthChanged, true);
    }

    public void CleanupCCvars()
    {
        _cfg.UnsubValueChanged(CCVars.EnablePlayerBugReports, OnEnablePlayerBugReportsChanged);
        _cfg.UnsubValueChanged(CCVars.MinimumPlaytimeInMinutesToEnableBugReports, OnMinimumPlaytimeChanged);
        _cfg.UnsubValueChanged(CCVars.MinimumSecondsBetweenBugReports, OnMinimumTimeBetweenReportsChanged);
        _cfg.UnsubValueChanged(CCVars.MaximumBugReportsPerRound, OnMaximumReportsPerRoundChanged);

        _cfg.UnsubValueChanged(CCVars.MaximumBugReportTitleLength, OnMaxTitleLengthChanged);
        _cfg.UnsubValueChanged(CCVars.MinimumBugReportTitleLength, OnMinTitleLengthChanged);
        _cfg.UnsubValueChanged(CCVars.MaximumBugReportDescriptionLength, OnMaxDescriptionLengthChanged);
        _cfg.UnsubValueChanged(CCVars.MinimumBugReportDescriptionLength, OnMinDescriptionLengthChanged);
    }

    private void OnEnablePlayerBugReportsChanged(bool value)
    {
        _enablePlayerBugReports = value;
    }

    private void OnMinimumPlaytimeChanged(int value)
    {
        _minimumPlaytimeBugReports = value;
    }

    private void OnMinimumTimeBetweenReportsChanged(int value)
    {
        _minimumTimeBetweenBugReports = value;
    }

    private void OnMaximumReportsPerRoundChanged(int value)
    {
        _maximumBugReportsPerRound = value;
    }

    private void OnMaxTitleLengthChanged(int value)
    {
        _maximumBugReportTitleLength = value;
    }

    private void OnMinTitleLengthChanged(int value)
    {
        _minimumBugReportTitleLength = value;
    }

    private void OnMaxDescriptionLengthChanged(int value)
    {
        _maximumBugReportDescriptionLength = value;
    }

    private void OnMinDescriptionLengthChanged(int value)
    {
        _minimumBugReportDescriptionLength = value;
    }

    #endregion
}
